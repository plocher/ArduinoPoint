#!/bin/sh
#    Autogenerated JMRI Panel generator for
#    **************************************
#    ${ '{:^34}'.format(cp.name + ' Field Unit') }
#    on: ${ cp.today() }
#
. ../../JMRI/createpanel.sh    # library routines to build panel
#

<%
count = 0
for _, CP in iter(natsorted(cp.ctcpanel.children.items())):
    for _, COL in iter(natsorted(CP.children.items())):
        count = count + 1
%>

start=12
add=64
numcols=${ '{}'.format(count + 1) }

emitProlog
emitStartSensors

% for _, CP in iter(natsorted(cp.ctcpanel.children.items())):
${ '# {cp}'.format(cp=CP.name) }
    %for _, COL in iter(natsorted(CP.children.items())):
${ '# Column: {}'.format(COL.name) }
        %for _, ITEM in iter(natsorted(COL.children.items())):
            <% d = dict(cp=CP.name, n=ITEM.name) %>
            % if ITEM.mytype == "code":
                ${ 'createSensor  {cp}_CODE'.format(**d) }
            % elif ITEM.mytype == "call":
                ${ 'createSensor  {n}'.format(**d) }
                ${ 'createSensor  {n}K'.format(**d) }
            % elif ITEM.mytype == "signal":
                ${ 'createSensor  {n}'.format(**d) }
                ${ 'createSensor  {n}SGK'.format(**d) }
                ${ 'createSensor  {n}NGK'.format(**d) }
                ${ 'createSensor  {n}TEK'.format(**d) }
            % elif ITEM.mytype == "lock":
                ${ 'createSensor  {n}'.format(**d) }
                ${ 'createSensor  {n}NWK'.format(**d) }
                ${ 'createSensor  {n}RWK'.format(**d) }
            % elif ITEM.mytype == "switch":
                ${ 'createSensor  {n}'.format(**d) }
                ${ 'createSensor  {n}NWK'.format(**d) }
                ${ 'createSensor  {n}RWK'.format(**d) }
            % elif ITEM.mytype == "model":
                ${ 'createSensor  {n}K'.format(**d) }
            % endif
        %endfor
    %endfor
%endfor

emitFinishSensors
emitStartPanel 0 $(( (1 + numcols) * add + (start * 3) ))

% for _, CP in iter(natsorted(cp.ctcpanel.children.items())):
${ '# {cp}'.format(cp=CP.name) }
    % for _, COL in iter(natsorted(CP.children.items())):
        ${ "# Column: {col}".format(col=COL.name) }
        ${ 'col=$(( ({col} - 1) * add + start ))'.format(col=COL.name) }
        createPanelBackground "$col"
        % for _, ITEM in iter(natsorted(COL.children.items())):
            <% d = dict(cp=CP.name, n=ITEM.name) %>
            % if ITEM.mytype == "code":
                ${ 'createCodeButton  "$col" {cp}_CODE'.format(**d) }
            % elif ITEM.mytype == "call":
                ${ 'createMC          "$col" {n}  {n}K'.format(**d) }
            % elif ITEM.mytype == "signal":
                ${ 'createSigPlate    "$col" {n}  {n}SGK  {n}NGK  {n}TEK'.format(**d) }
            % elif ITEM.mytype == "lock":
                ${ 'createLockPlate   "$col" {n}  {n}NWK  {n}RWK'.format(**d) }
            % elif ITEM.mytype == "switch":
                ${ 'createSwitchPlate "$col" {n}  {n}NWK  {n}RWK'.format(**d) }
            % elif ITEM.mytype == "model":
                ${ 'createModel       "$col" {n}K {color} {pos}'.format(n=ITEM.name, color=ITEM.color, pos=ITEM.position) }
            % endif
        % endfor
    % endfor
% endfor
emitFinishPanel "$(( (numcols - 1) * add + start))"
emitEpilog

