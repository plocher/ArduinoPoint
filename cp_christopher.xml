<controlpoint name="CP_Christopher" layout="SPCoast" node="0x14">

    <switches>
            <switch name="1"  trackcircuit="1T1" />
            <switch name="3"  trackcircuit="3T1" />
            <switch name="3B" trackcircuit="3BT1"/>
            <switch name="5"  trackcircuit="5T1" />
    </switches>
    <trackcircuits>
            <trackcircuit name="EA1" />
            <trackcircuit name="EA2" />
            <trackcircuit name="WA1" />
            <trackcircuit name="WA2" />
            <trackcircuit name="TCB" />
            <trackcircuit name="POW" />
    </trackcircuits>
    <maintainers>
            <call         name="MC1" />
    </maintainers>
    <signals>
            <signal name="2">
                    <head name="H2NA"> </head>
                    <head name="H2NB"> </head>
                    <head name="H2SA"> </head>
                    <head name="H2SB"> </head>
            </signal>
    </signals>

    <indications>
            <indication name="1NW"   byte="0" bit="0"/>
            <indication name="1RW"   byte="0" bit="1"/>
            <indication name="3NW"   byte="0" bit="2"/>
            <indication name="3RW"   byte="0" bit="3"/>
            <indication name="3BNW"  byte="0" bit="4"/>
            <indication name="3BRW"  byte="0" bit="5"/>
            <indication name="5NW"   byte="0" bit="6"/>
            <indication name="5RW"   byte="0" bit="7"/>

            <indication name="1T1"   byte="1" bit="0" />
            <indication name="3T1"   byte="1" bit="1" />
            <indication name="3BT1"  byte="1" bit="2" />
            <indication name="5T1"   byte="1" bit="3" />
            <indication name="EA1"   byte="1" bit="6" />
            <indication name="EA2"   byte="1" bit="7" />
            <indication name="WA1"   byte="1" bit="4" />
            <indication name="WA2"   byte="1" bit="5" />

            <indication name="2SG"   byte="2" bit="0" />
            <indication name="2NG"   byte="2" bit="1" />
            <indication name="TCB"   byte="2" bit="5" />
            <indication name="MC1"   byte="2" bit="6" />
            <indication name="POW"   byte="2" bit="7" />

    </indications>

    <controls>
            <control name="1NW"      byte="0" bit="0" />
            <control name="1RW"      byte="0" bit="1" />
            <control name="3NW"      byte="0" bit="2" />
            <control name="3RW"      byte="0" bit="3" />
            <control name="3BNW"     byte="0" bit="4" />
            <control name="3BRW"     byte="0" bit="5" />
            <control name="5NW"      byte="0" bit="6" />
            <control name="5RW"      byte="0" bit="7" />

            <control name="2SG"      byte="1" bit="0" />
            <control name="2NG"      byte="1" bit="1" />
            <control name="2H"       byte="1" bit="2" />
            <control name="MC1"      byte="1" bit="6" />
            <control name="POW"      byte="1" bit="7" />
    </controls>


    <fields>
            <input   name="1RW"      byte="0" bit="0" />
            <input   name="1NW"      byte="0" bit="1" />
            <input   name="1T1"      byte="0" bit="2" />
            <output  name="T1"       byte="0" bit="3" />

            <input   name="3RW"      byte="1" bit="0" />
            <input   name="3NW"      byte="1" bit="1" />
            <input   name="3T1"      byte="1" bit="2" />
            <output  name="T3"       byte="1" bit="3" />

            <input   name="3BRW"     byte="1" bit="4" />
            <input   name="3BNW"     byte="1" bit="5" />
            <input   name="3BT1"     byte="1" bit="6" />
            <output  name="T3B"      byte="1" bit="7" />

            <input   name="5RW"      byte="0" bit="4" />
            <input   name="5NW"      byte="0" bit="5" />
            <input   name="5T1"      byte="0" bit="6" />
            <output  name="T5"       byte="0" bit="7" />

            <input   name="EA1"      byte="3" bit="0" />
            <input   name="EA2"      byte="3" bit="1" />
            <input   name="WA1"      byte="3" bit="2" />
            <input   name="WA2"      byte="3" bit="3" />
            <input   name="HBD"      byte="3" bit="4" />
            <input   name="POW"      byte="3" bit="5" />
            <input   name="TCB"      byte="3" bit="6" />

            <output  name="H2NA">
                <output  name="H2NA1"     byte="2" bit="0" />
                <output  name="H2NA2"     byte="2" bit="1" />
            </output>

            <output  name="H2NB">
                <output  name="H2NB1"     byte="2" bit="2" />
                <output  name="H2NB2"     byte="2" bit="3" />
            </output>

            <output  name="H2SA">
                <output  name="H2SA1"     byte="2" bit="4" />
                <output  name="H2SA2"     byte="2" bit="5" />
            </output>

            <output  name="H2SB">
                <output  name="H2SB1"     byte="2" bit="6" />
                <output  name="H2SB2"     byte="2" bit="7" />
            </output>

            <output  name="MC1"      byte="4" bit="0"  />
    </fields>

    <expanders>
        <expander type="PCF8574"      address="0"  byte="0" />
        <expander type="PCF8574A"     address="0"  byte="1" />
        <expander type="PCF8574"      address="1"  byte="2" />
        <expander type="PCF8574A"     address="1"  byte="3" />
        <expander type="ARDIO13_A"   address="0"  byte="4" />
        <expander type="ARDIO13_B"   address="0"  byte="5" />
    </expanders>

    <code>
        <function name="common">
/*
 * Common defines used by the various code snippets
 */
#define _MR(a,b)     RRSignalHead::mostRestrictive((a),(b))
#define _LR(a,b)     RRSignalHead::leastRestrictive((a),(b))
#define _EMPTY(t)    track[(t)].is(TrackCircuit::EMPTY)
#define _OCCUPIED(t) track[(t)].is(TrackCircuit::OCCUPIED)
#define _NORMAL(s)   sw[(s)]   .is(Switch::NORMAL)
#define _REVERSE(s)  sw[(s)]   .is(Switch::REVERSE)
#define _RIGHT(s)    (RRSignalHead::Aspects)sig[(s)].RightAspect() // allowed by cTc, stick relay...
#define _LEFT(s)     (RRSignalHead::Aspects)sig[(s)].LeftAspect()

        </function>
        <function name="knockdownSignal">
int knockdownSignal(int signalName) {
    switch (signalName) {
        case CP_Christopher_SIG2:
            if (_OCCUPIED(CP_Christopher_1T1) ||
                _OCCUPIED(CP_Christopher_3T1) ||
                _OCCUPIED(CP_Christopher_3BT1) ||
                _OCCUPIED(CP_Christopher_5T1) ) {
              return sig[CP_Christopher_SIG2].knockdown();
            }
    }
    return 0;
}

        </function>
        <function name="determineAspect">
/*
 *  Routes
 *
 *  calculate the aspects suitable for each of the various routes through the interlocking/control point
 */


int determineAspect(int signalHead) {
    // Set the aspects for the heads on 2S...
    // (the mast has 2 heads, "A" over "B")
    // If top head is not STOP, bottom head should be STOP and vice-versa

    RRSignalHead::Aspects r1 = RRSignalHead::CLEAR;
    RRSignalHead::Aspects r2 = RRSignalHead::CLEAR;
    RRSignalHead::Aspects r3 = RRSignalHead::CLEAR;

    switch (signalHead) {
        case CP_Christopher_H2NA:
                //    MT1 S'bound into MT1:
                r1 = _MR(r1, _NORMAL (CP_Christopher_SW5) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r1 = _MR(r1, _NORMAL (CP_Christopher_SW3) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r1 = _MR(r1, _NORMAL (CP_Christopher_SW1) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r1 = _MR(r1, _EMPTY  (CP_Christopher_5T1) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r1 = _MR(r1, _EMPTY  (CP_Christopher_3T1) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r1 = _MR(r1, _EMPTY  (CP_Christopher_EA2) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);

                //    MT2 S'bound crossover to MT2: (RED over XXX)
                r2 = RRSignalHead::STOP;

                //    MT2 S'bound into IND:
                r3 = _MR(r3, _REVERSE(CP_Christopher_SW5) ? RRSignalHead::APPROACH  : RRSignalHead::STOP);
                r3 = _MR(r3, _REVERSE(CP_Christopher_SW1) ? RRSignalHead::APPROACH  : RRSignalHead::RESTRICTING);
                r3 = _MR(r3, _EMPTY  (CP_Christopher_5T1) ? RRSignalHead::CLEAR     : RRSignalHead::STOP);
                r3 = _MR(r3, _EMPTY  (CP_Christopher_1T1) ? RRSignalHead::CLEAR     : RRSignalHead::RESTRICTING);
                return _LR(_LR(r1, r2), r3);

        case CP_Christopher_H2NB:
                //    MT1 S'bound into MT1:
                r1 = RRSignalHead::STOP;

                //    MT2 S'bound crossover to MT2:
                r2 = _MR(r2, _NORMAL (CP_Christopher_SW5) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _REVERSE(CP_Christopher_SW3) ? RRSignalHead::APPROACH   : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_5T1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_3T1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_3BT1)? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_EA1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _LEFT(CP_Christopher_SIG2));

                //    MT2 S'bound into IND:
                r3 = RRSignalHead::STOP;

                return RRSignalHead::leastRestrictive(RRSignalHead::leastRestrictive(r1, r2), r3);

        case CP_Christopher_H2SA:
                //    MT2 N'bound on MT2:           if SW3/3B is NORMAL, XXX over RED
                r1 = _MR(r1, _NORMAL (CP_Christopher_SW3) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r1 = _MR(r1, _EMPTY  (CP_Christopher_3BT1)? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r1 = _MR(r1, _EMPTY  (CP_Christopher_WA1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);

                //    MT2 N'bound crossover to MT1: if SW3/3B is set to crossover so we get RED over XXX
                r2 = RRSignalHead::STOP;   // this is the "RED over" part
                return _LR(r1, r2);

        case CP_Christopher_H2SB:
                //    MT2 N'bound on MT2:
                r1 = RRSignalHead::STOP;    // ... this is the "over RED" part

                //    MT2 N'bound crossover to MT1:
                r2 = _MR(r2, _REVERSE(CP_Christopher_SW3) ? RRSignalHead::APPROACH   : RRSignalHead::STOP);
                r2 = _MR(r2, _NORMAL (CP_Christopher_SW5) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_3BT1)? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_3T1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_5T1) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _EMPTY  (CP_Christopher_WA2) ? RRSignalHead::CLEAR      : RRSignalHead::STOP);
                r2 = _MR(r2, _RIGHT  (CP_Christopher_SIG2));
                return _LR(r1, r2);

        default:
                return RRSignalHead::STOP;
    }
}

        </function>
        <function name="XdebugCallback">
void debugCallBack(boolean somethingchanged) {
#ifdef HASLCD   // ---- Debugging on LCD display
    if (somethingchanged) {
        lcd.setCursor(0,  3);
        for (int x = 0; x &lt;  getNumSwitches(); x++) {
            if (!sw[x].isC(Switch::UNKNOWN) &amp;&amp; sw[x].commanded() != sw[x].is()) {
                lcd.print(sw[x].isC(Switch::NORMAL)  ? "n":
                          sw[x].isC(Switch::REVERSE) ? "r":
                          sw[x].isC(Switch::UNKNOWN) ? "u":
                          sw[x].isC(Switch::ERROR)   ? "e":
                          sw[x].isC(Switch::TIME)    ? "t" : "-");
            } else {
              lcd.print(sw[x].isRunning()         ? "T":
                        sw[x].is(Switch::NORMAL)  ? "N":
                        sw[x].is(Switch::REVERSE) ? "R":
                        sw[x].is(Switch::UNKNOWN) ? "U":
                        sw[x].is(Switch::ERROR)   ? "E": "?");
            }
        }
        lcd.setCursor(5,  3);
        for (int x = 0; x &lt;  getNumTrackCircuits(); x++) {
              lcd.print(track[x].is(TrackCircuit::OCCUPIED)  ? "O":
                        track[x].is(TrackCircuit::EMPTY)     ? "-":
                        track[x].is(TrackCircuit::UNKNOWN)   ? "?": "E");
        }
        lcd.setCursor(17,  3);
        lcd.print(sig[CP_Corporal::SIG2].is(RRSignal::LEFT)  ? "L":
                        sig[CP_Corporal::SIG2].is(RRSignal::RIGHT)     ? "R":
                        sig[CP_Corporal::SIG2].is(RRSignal::ALLSTOP)   ? "S":
                        sig[CP_Corporal::SIG2].is(RRSignal::TIME)      ? "T":
                        sig[CP_Corporal::SIG2].is(RRSignal::UNKNOWN)   ? "?": "E");

        lcd.setCursor(0,  1); lcd.print("f0:"); lcdprintbin(m[0].next);
        lcd.setCursor(0,  2); lcd.print("f1:"); lcdprintbin(m[1].next);
    }
#endif
}
        </function>
    </code>
</controlpoint>

